<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.anamensis.server.mapper.MemberMapper">
    <sql id="tbl_member">
        SELECT *
          FROM member
    </sql>

    <select id="count" resultType="Long">
        SELECT COUNT(DISTINCT m.id)
          FROM member m
        <if test="role != null and role != ''">
          JOIN role r
            ON r.member_pk = m.id
           AND r.role = #{role}
        </if>
         WHERE 1 = 1
        <if test="userId != null and userId != ''">
           AND m.user_id LIKE concat('%', #{userId}, '%')
        </if>
    </select>

    <select id="findAllMember" resultMap="memberResultMap">
        SELECT *
          FROM member m
          JOIN (SELECT m1.id
                  FROM member m1
                 WHERE 1 = 1
                  <if test="params != null and params.userId != null and params.userId != ''">
                    AND m1.user_id LIKE concat('%', #{params.userId}, '%')
                  </if>
                 ORDER BY m1.user_id
                 LIMIT #{page.offset}, #{page.size}
             ) m2
            ON m.id = m2.id
          JOIN role r
            ON r.member_pk = m2.id
           <if test="params != null and params.role != null and params.role != ''">
               AND r.role = #{params.role}
           </if>
    </select>

    <select id="findMemberByUserId" resultType="Member">
        <include refid="tbl_member"/>
        WHERE user_id = #{userId}
    </select>
    <select id="findMemberByUserIdAndPwd" resultType="Member">
        <include refid="tbl_member"/>
        WHERE user_id = #{userId}
          AND pwd     = #{pwd}
    </select>
    <select id="findMemberInfo" resultMap="memberResultMap">
        SELECT *
          FROM member a
          JOIN role b
            ON a.id      = b.member_pk
         WHERE a.user_id = #{userId}
    </select>
    <select id="existsMember" resultType="boolean">
        SELECT EXISTS(
               SELECT *
                 FROM member
                WHERE 1 = 1
             <choose>
                <when test="type != null and type == 'id' and value != null and value != ''">
                    AND user_id = #{value}
                </when>
                <when test="type != null and type == 'email' and value != null and value != ''">
                    AND email   = #{value}
                </when>
                <when test="type != null and type == 'phone' and value != null and value != ''">
                    AND phone   = #{value}
                </when>
             </choose>
             )
    </select>
    <select id="findMemberByEmailAndUserId">
        <include refid="tbl_member"/>
        WHERE email  = #{email}
        <if test="userId != null and userId != ''">
            AND user_id = #{userId}
        </if>
          AND is_use = 1
    </select>
    <insert id="save" parameterType="Member">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO member (user_id, pwd, name,
                            email, phone, create_at)
        VALUES (#{userId}, #{pwd}, #{name},
                #{email}, #{phone}, #{createAt})
    </insert>
    <insert id="saveRole" parameterType="Role">
        INSERT INTO role (member_pk, role)
        VALUES (#{memberPk}, #{role})
    </insert>
    <insert id="saveRoles">
        INSERT INTO role (member_pk, role)
        VALUES
        <foreach collection="ids" item="id" separator=",">
            (#{id}, #{role})
        </foreach>
    </insert>

    <update id="editAuth" parameterType="map">
        UPDATE member
           SET s_auth      = #{isAuth},
               s_auth_type = #{authType}
         WHERE id          = #{id}
    </update>

    <update id="updatePoint" parameterType="Map">
        UPDATE member
           SET point = point + #{point}
         WHERE id    = #{id}
    </update>

    <update id="subtractPoint" parameterType="Map">
        UPDATE member
           SET point = point - #{point}
         WHERE id    = #{id}
    </update>

    <update id="update" parameterType="Member">
        UPDATE member
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
        </set>
         WHERE id    = #{id}
    </update>
    <update id="updatePwd">
        UPDATE member
           SET pwd     = #{pwd}
         WHERE user_id = #{userId}
           AND email   = #{email}
           AND is_use  = 1
    </update>

    <delete id="deleteRole" parameterType="Role">
        DELETE
          FROM role
         WHERE member_pk = #{memberPk}
           AND role      = #{role}
    </delete>

    <delete id="deleteRoles">
        DELETE
          FROM role
         WHERE member_pk
            IN <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
           AND role = #{role}
    </delete>
    
    <resultMap id="memberResultMap" type="MemberResultMap" autoMapping="true">
        <id property="memberPk" column="id"/>
        <association property="member" resultMap="MemberEntity" autoMapping="true" />
        <collection property="roles" resultMap="RoleEntity" />
    </resultMap>

    <resultMap id="MemberEntity" type="Member" autoMapping="true">
        <result property="sAuthType" column="s_auth_type" typeHandler="AuthTypeHandler"/>
    </resultMap>
    <resultMap id="RoleEntity" type="Role" autoMapping="true">
        <result property="role" column="role" typeHandler="RoleTypeHandler"/>
    </resultMap>

</mapper>